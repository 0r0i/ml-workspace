events {}

http {
    
    log_format my_upstream '$remote_addr [$time_local] "$request" $status'
    ' "$upstream_addr" $upstream_response_time $upstream_http_etag $tool_port $remaining_part';

    # if SERVICE_SSL_ENABLED flag is set, following lines are commented in and the path to the certs is set
    #ssl_certificate
    #ssl_certificate_key

    client_max_body_size 10G;
    client_body_timeout 300s;
    client_header_timeout 120s;

    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;
    
    map $http_referer $served_referer {
       default $http_referer;
       "~.*hub.*" $host/hub/;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

     map $upstream_http_location $new_location {
        default .$upstream_http_location;
    }


    upstream jupyter {
        server localhost:8090 fail_timeout=0;
    }
    
    server {
        listen 8092;
        
        error_page 502 504 /5xx.html;
        error_page 497  https://$host:$server_port$request_uri;

        location = /5xx.html {
            root /resources/;
            internal;
        }

        location / {
            #auth_basic "Restricted Access";
            #auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://jupyter;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Origin ""; # set origin to empty, otherwise Jupyter returns a bad origin request
        }

        # needed for the kernel to connect
        location ~* /(api/kernels/[^/]+/(channels|iopub|shell|stdin)|terminals/websocket)/? {
            proxy_pass http://jupyter;

            proxy_set_header Referer $served_referer;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_hide_header content-security-policy;
            proxy_set_header Origin "";

            # websocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # redirect /tools/vnc/ to /tools/vnc/vnc.html because there you have a clipboard etc.
        location = /tools/vnc/ {
            rewrite ^(.*)$ /tools/vnc/vnc.html last;
        }

        # if url is called without trailing slash, add a trailing slash, otherwise it cannot be routed correctly.
        # example: /tools/netdata -> /tools/netdata/ ; /tools/vnc -> /tools/vnc/ ; /tools/netdata/foo -(unchanged)> /tools/netdata/foo
        location ~* /tools/[^/]+$ {
            return 301 $scheme://$http_host$request_uri/;
        }

        location ~* /tools/(?<tool>[a-zA-Z]+)/(?<remaining_part>.*) {
            access_log /var/log/nginx/upstream.log my_upstream;

            #auth_basic "Restricted Access";
            #auth_basic_user_file /etc/nginx/.htpasswd;
            
            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }

            if ($tool = vnc) {
                set $tool_port 6901;
            }
            if ($tool = netdata) {
                set $tool_port 8050;
            }
            if ($tool = ungit) {
                set $tool_port 8051;
                set $remaining_part workspace/tools/ungit/$remaining_part; # since ungit is listening on the specific base_url, it has to be prepended here
            }
            if ($tool = glances) {
                set $tool_port 8053;
            }
            if ($tool = vscode) {
                set $tool_port 8054;
            }
            
            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;

            proxy_pass http://127.0.0.1:$tool_port/$remaining_part$is_args$args;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }

        # Access all-ports via /tools/PORT
        location ~* /tools/(?<access_port>[0-9]+)/(?<remaining_path>.*) {
            access_log /var/log/nginx/upstream.log my_upstream;

            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;
            proxy_pass http://127.0.0.1:$access_port/$remaining_path$is_args$args;


            gzip on;
            gzip_proxied any;
            gzip_types *;
        }

        location /healthy {
            return 200;
        }

        location /ping {
            return 200;
        }
    }
}
